using System.Collections.Generic;
using System.Threading;
using System;

/// <summary>
/// Singleton class for managing and executing multithreaded tasks related to map data generation. <br/>
/// This class handles requests for data generation on separate threads and manages the execution of callbacks once the data is ready.<br/>
/// It ensures that data generation tasks do not block the main thread, improving performance and responsiveness in the application.
/// </summary>
public class MultiThreading : Singleton<MultiThreading>
{
    
    /// <summary>
        /// Queue to store map data generated by threads, along with the associated callbacks. <br/>
        /// This ensures that results from different threads are processed in the order they were completed.
        /// </summary>
    private Queue<ThreadInfo> dataQueue = new Queue<ThreadInfo>();

    /// <summary>
    /// Requests map data generation on a separate thread. <br/>
    /// This method takes a delegate to generate the data and a callback to be invoked once the data is ready. <br/>
    /// The data generation is performed on a new thread to avoid blocking the main thread.
    /// </summary>
    /// <param name="generateData">A function that generates the map data and returns it as an object.</param>
    /// <param name="callback">An action to be invoked with the generated data once the data generation is complete.</param>
    public static void RequestData(Func<object>generateData, Action<object> callback)
    {
        ThreadStart threadStart = delegate
        {
            Instance.DataThread(generateData, callback);
        };

        new Thread(threadStart).Start();
    }

    /// <summary>
    /// Generates map data on a separate thread and enqueues the result along with the callback. <br/>
    /// This method is executed on a new thread to ensure that the data generation does not block the main thread.
    /// </summary>
    /// <param name="generateData">A function that generates the map data and returns it as an object.</param>
    /// <param name="callback">An action to be invoked with the generated data once the data generation is complete.</param>
    private void DataThread(Func<object>generateData, Action<object> callback)
    {
        object data = generateData();

        lock (dataQueue)
        {
            dataQueue.Enqueue(new ThreadInfo(callback, data));
        }
    }
    
    /// <summary>
    /// Updates the main thread by processing any completed data generation tasks. <br/>
    /// This method dequeues completed data from the queue and invokes the corresponding callback with the generated data.<br/>
    /// It is called every frame to ensure that callbacks are executed in a timely manner.
    /// </summary>
    private void Update()
    {
        if (dataQueue.Count > 0)
        {
            for (int i = 0; i < dataQueue.Count; i++)
            {
                ThreadInfo threadInfo = dataQueue.Dequeue();
                threadInfo.callback(threadInfo.parameter);
            }
        }
    }
}
